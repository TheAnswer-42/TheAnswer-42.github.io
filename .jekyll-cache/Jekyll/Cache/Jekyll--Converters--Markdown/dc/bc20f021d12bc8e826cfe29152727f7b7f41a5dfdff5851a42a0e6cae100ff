I"#"<p>Python으로 백준 Online Judge의 문제 1463번, <a href="https://www.acmicpc.net/problem/1463">1로 만들기</a>를 풀어보자.<br /><br /></p>

<blockquote>
  <p>정수 <code class="highlighter-rouge">x</code>에 사용할 수 있는 연산은 다음 세 가지이다:</p>
  <ol>
    <li>3으로 나누어 떨어지면, 3으로 나눈다.</li>
    <li>2로 나누어 떨어지면, 2로 나눈다.</li>
    <li>1을 뺀다.
정수 <code class="highlighter-rouge">x</code>가 주어졌을 때, 위와 같은 연산을 적절히 사용해서 1을 만들려고 한다. 연산 횟수의 최솟값을 출력하라.</li>
  </ol>
</blockquote>

<blockquote>
  <blockquote>
    <p><span style="color:#2d8659"><strong>Input:</strong></span></p>
    <ul>
      <li>첫째 줄에 <script type="math/tex">% <![CDATA[
0 < x < 10^6 %]]></script>인 정수 <code class="highlighter-rouge">x</code>를 입력받는다.</li>
    </ul>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p><span style="color:#2d8659"><strong>Print:</strong></span></p>
    <ul>
      <li>첫째 줄에 연산 횟수의 최솟값을 출력한다.</li>
    </ul>
  </blockquote>
</blockquote>

<p>예를 들어, <code class="highlighter-rouge">2</code>를 입력받으면 <code class="highlighter-rouge">1</code>을 출력한다. <code class="highlighter-rouge">10</code>을 입력받으면 <code class="highlighter-rouge">3</code>을 출력한다 (10-&gt;9-&gt;3-&gt;1).</p>

<p>처음에는 다음과 같은 코드를 작성하였다. 동적 프로그래밍을 위해 <code class="highlighter-rouge">memo</code>에 연산 횟수를 저장하였다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">getMinOper</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">memo</span><span class="o">=</span><span class="p">{}):</span>
    <span class="k">if</span> <span class="n">x</span> <span class="k">in</span> <span class="ss">memo:
        </span><span class="n">minOper</span> <span class="o">=</span> <span class="n">memo</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
    <span class="ss">else:
        </span><span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>  <span class="c1"># base case</span>
            <span class="n">minOper</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="ss">else:   </span><span class="c1"># recursive case</span>
            <span class="n">divideBy3</span><span class="p">,</span> <span class="n">divideBy2</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span>     <span class="c1"># upper bounds</span>
            <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">divideBy3</span> <span class="o">=</span> <span class="n">getMinOper</span><span class="p">(</span><span class="n">x</span> <span class="sr">//</span> <span class="mi">3</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">divideBy2</span> <span class="o">=</span> <span class="n">getMinOper</span><span class="p">(</span><span class="n">x</span> <span class="sr">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span>
            <span class="n">minus1</span> <span class="o">=</span> <span class="n">getMinOper</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span>
            <span class="n">minOper</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">divideBy3</span><span class="p">,</span> <span class="n">divideBy2</span><span class="p">,</span> <span class="n">minus1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="n">memo</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">minOper</span>
    <span class="k">return</span> <span class="n">minOper</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">int</span><span class="p">(</span><span class="n">input</span><span class="p">())</span>
<span class="nb">print</span><span class="p">(</span><span class="n">getMinOper</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><code class="highlighter-rouge">x</code>가 1000 이하일 때는 옳은 결과를 출력했다. 그러나 Python은 재귀 호출을 1000번으로 제한하고 있기 때문에, <code class="highlighter-rouge">x</code>가 1000을 초과하면 다음과 같은 에러를 출력했다.</p>

<figure class="highlight"><pre><code class="language-language" data-lang="language">  RecursionError: maximum recursion depth exceeded in comparison</code></pre></figure>

<p>더 효율적인 방법이 필요하여 다른 분의 <a href="https://www.acmicpc.net/source/13694219">코드</a>를 참고하였다. 작성한 코드는 다음과 같으며, 역시 <code class="highlighter-rouge">memo</code>에 연산 횟수를 저장하는 방법을 사용하였다. 그러나 <code class="highlighter-rouge">x=1</code>, <code class="highlighter-rouge">x=2</code> 경우를 <code class="highlighter-rouge">memo</code>에 저장하고 시작하였고, <code class="highlighter-rouge">getMinOper(x // 2, memo) + x % 2</code>와 <code class="highlighter-rouge">getMinOper(x // 3, memo) + x % 3</code>만을 비교해 최소값을 구하였다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">getMinOper</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">memo</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">1</span><span class="p">}):</span>
    <span class="k">if</span> <span class="n">x</span> <span class="k">in</span> <span class="ss">memo:
        </span><span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
    <span class="n">minOper</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">getMinOper</span><span class="p">(</span><span class="n">x</span> <span class="sr">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span> <span class="o">+</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span><span class="p">,</span> <span class="n">getMinOper</span><span class="p">(</span><span class="n">x</span> <span class="sr">//</span> <span class="mi">3</span><span class="p">,</span> <span class="n">memo</span><span class="p">)</span> <span class="o">+</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">memo</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">minOper</span>
    <span class="k">return</span> <span class="n">minOper</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">int</span><span class="p">(</span><span class="n">input</span><span class="p">())</span>
<span class="nb">print</span><span class="p">(</span><span class="n">getMinOper</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><code class="highlighter-rouge">100000</code>을 입력하면 <code class="highlighter-rouge">19</code>가 출력되는 것을 확인하였다.</p>

:ET